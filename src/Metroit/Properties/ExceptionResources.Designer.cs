//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Metroit.Properties {
    using System;
    
    
    /// <summary>
    ///   ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
    /// </summary>
    // このクラスは StronglyTypedResourceBuilder クラスが ResGen
    // または Visual Studio のようなツールを使用して自動生成されました。
    // メンバーを追加または削除するには、.ResX ファイルを編集して、/str オプションと共に
    // ResGen を実行し直すか、または VS プロジェクトをビルドし直します。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ExceptionResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ExceptionResources() {
        }
        
        /// <summary>
        ///   このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Metroit.Properties.ExceptionResources", typeof(ExceptionResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   すべてについて、現在のスレッドの CurrentUICulture プロパティをオーバーライドします
        ///   現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Since the file already exists in the conversion destination file path, conversion can not be continued. に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ExistsDestFilePath {
            get {
                return ResourceManager.GetString("ExistsDestFilePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   変換先ファイルパスに既にファイルが存在するため、変換を続行することはできません。 に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ExistsDestFilePath_ja {
            get {
                return ResourceManager.GetString("ExistsDestFilePath.ja", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Invalid conversion parameter specification. に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string InvalidConvertParameter {
            get {
                return ResourceManager.GetString("InvalidConvertParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   変換パラメーターの指定が不正です。 に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string InvalidConvertParameter_ja {
            get {
                return ResourceManager.GetString("InvalidConvertParameter.ja", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The path does not exist.
        ///{0} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string NotExistsFilePath {
            get {
                return ResourceManager.GetString("NotExistsFilePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   パスが存在しません。
        ///{0} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string NotExistsFilePath_ja {
            get {
                return ResourceManager.GetString("NotExistsFilePath.ja", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Because I reached the upper limit, I cannot add it. に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ObjectMaxReached {
            get {
                return ResourceManager.GetString("ObjectMaxReached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   上限に達したため、追加を行うことができません。 に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ObjectMaxReached_ja {
            get {
                return ResourceManager.GetString("ObjectMaxReached.ja", resourceCulture);
            }
        }
        
        /// <summary>
        ///   The maximum size can not be less than 0. に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ObjectMaxSizeOutOfRange {
            get {
                return ResourceManager.GetString("ObjectMaxSizeOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   最大サイズに0未満を指定することはできません。 に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ObjectMaxSizeOutOfRange_ja {
            get {
                return ResourceManager.GetString("ObjectMaxSizeOutOfRange.ja", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Since the temporary file path and the conversion destination file path are the same, conversion can not be continued. に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SameTempPathAndDestFilePath {
            get {
                return ResourceManager.GetString("SameTempPathAndDestFilePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   一時ファイルパスと変換先ファイルパスが同一のため、変換を続行することはできません。 に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SameTempPathAndDestFilePath_ja {
            get {
                return ResourceManager.GetString("SameTempPathAndDestFilePath.ja", resourceCulture);
            }
        }
    }
}
